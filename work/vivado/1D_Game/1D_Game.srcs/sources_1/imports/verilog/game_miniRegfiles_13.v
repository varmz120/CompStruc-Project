/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniRegfiles_13 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [15:0] out,
    output reg [15:0] total_score,
    output reg [15:0] ball_count_out
  );
  
  
  
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [15:0] M_ball_count_d, M_ball_count_q = 1'h0;
  reg [15:0] M_current_timer_d, M_current_timer_q = 1'h0;
  reg [15:0] M_temp_var1_d, M_temp_var1_q = 1'h0;
  reg [15:0] M_temp_var2_d, M_temp_var2_q = 1'h0;
  reg [15:0] M_temp_var3_d, M_temp_var3_q = 1'h0;
  
  always @* begin
    M_score_d = M_score_q;
    M_ball_count_d = M_ball_count_q;
    M_current_timer_d = M_current_timer_q;
    M_temp_var1_d = M_temp_var1_q;
    M_temp_var2_d = M_temp_var2_q;
    M_temp_var3_d = M_temp_var3_q;
    
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_score_d = data;
        end
        4'h1: begin
          M_ball_count_d = data;
        end
        4'h2: begin
          M_current_timer_d = data;
        end
        4'h3: begin
          M_temp_var1_d = data;
        end
        4'h7: begin
          M_temp_var2_d = data;
        end
        4'h8: begin
          M_temp_var3_d = data;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_score_q;
      end
      4'h1: begin
        out_a = M_ball_count_q;
      end
      4'h2: begin
        out_a = M_current_timer_q;
      end
      4'h3: begin
        out_a = M_temp_var1_q;
      end
      4'h7: begin
        out_a = M_temp_var2_q;
      end
      4'h8: begin
        out_a = M_temp_var3_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_score_q;
      end
      4'h1: begin
        out_b = M_ball_count_q;
      end
      4'h2: begin
        out_b = M_current_timer_q;
      end
      4'h3: begin
        out_b = M_temp_var1_q;
      end
      4'h7: begin
        out_b = M_temp_var2_q;
      end
      4'h8: begin
        out_b = M_temp_var3_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    ball_count_out = M_ball_count_q;
    total_score = M_score_q;
    out = M_current_timer_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_score_q <= 1'h0;
      M_ball_count_q <= 1'h0;
      M_current_timer_q <= 1'h0;
      M_temp_var1_q <= 1'h0;
      M_temp_var2_q <= 1'h0;
      M_temp_var3_q <= 1'h0;
    end else begin
      M_score_q <= M_score_d;
      M_ball_count_q <= M_ball_count_d;
      M_current_timer_q <= M_current_timer_d;
      M_temp_var1_q <= M_temp_var1_d;
      M_temp_var2_q <= M_temp_var2_d;
      M_temp_var3_q <= M_temp_var3_d;
    end
  end
  
endmodule
