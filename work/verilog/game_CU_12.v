/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_CU_12 (
    input clk,
    input rst,
    input decrease_timer,
    input [15:0] regfile_datain,
    input custom_start_button,
    input ls_1,
    input ls_1F,
    input ls_2,
    input ls_2F,
    input ls_3,
    input ls_3F,
    input ls_4,
    input ls_4F,
    output reg [5:0] alufn,
    output reg [2:0] asel,
    output reg [2:0] bsel,
    output reg [1:0] alu_out_sel,
    output reg [3:0] regfile_write_address,
    output reg [3:0] regfile_read_address_a,
    output reg [3:0] regfile_read_address_b,
    output reg we_regfile,
    output reg [3:0] debug,
    output reg decimal_counter_increase,
    output reg decimal_counter_rst
  );
  
  
  
  localparam START_SET_TIMER_game_fsm = 5'd0;
  localparam IDLE_game_fsm = 5'd1;
  localparam CHECK_TIMER_game_fsm = 5'd2;
  localparam BRANCH_TIMER_game_fsm = 5'd3;
  localparam STORE_TIMER_game_fsm = 5'd4;
  localparam DECREASE_TIMER_game_fsm = 5'd5;
  localparam STOP_TIMER_game_fsm = 5'd6;
  localparam INCREASE_SCORE_1_game_fsm = 5'd7;
  localparam INCREASE_SCORE_1F_game_fsm = 5'd8;
  localparam INCREASE_SCORE_2_game_fsm = 5'd9;
  localparam INCREASE_SCORE_2F_game_fsm = 5'd10;
  localparam INCREASE_SCORE_3_game_fsm = 5'd11;
  localparam INCREASE_SCORE_3F_game_fsm = 5'd12;
  localparam INCREASE_SCORE_4_game_fsm = 5'd13;
  localparam INCREASE_SCORE_4F_game_fsm = 5'd14;
  localparam INCREASE_BALLCOUNT_game_fsm = 5'd15;
  localparam CHECK_BALLCOUNT_game_fsm = 5'd16;
  localparam BRANCH_BALLCOUNT_game_fsm = 5'd17;
  localparam CALCULATE_SCORE_game_fsm = 5'd18;
  localparam RESET_COUNTER_game_fsm = 5'd19;
  localparam RESET_TOTAL_SCORE_game_fsm = 5'd20;
  localparam RESET_SCORE_game_fsm = 5'd21;
  localparam RESET_TIMER_game_fsm = 5'd22;
  localparam RESET_BALL_game_fsm = 5'd23;
  localparam RESET_START_SET_TIMER_game_fsm = 5'd24;
  localparam GAME_OVER_game_fsm = 5'd25;
  
  reg [4:0] M_game_fsm_d, M_game_fsm_q = START_SET_TIMER_game_fsm;
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    alufn = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we_regfile = 1'h0;
    regfile_write_address = 11'h457;
    regfile_read_address_a = 1'h0;
    regfile_read_address_b = 1'h0;
    alu_out_sel = 1'h0;
    debug = 4'h0;
    decimal_counter_increase = 1'h0;
    decimal_counter_rst = 1'h0;
    if (rst) begin
      M_game_fsm_d = START_SET_TIMER_game_fsm;
      decimal_counter_rst = 1'h1;
    end else begin
      
      case (M_game_fsm_q)
        START_SET_TIMER_game_fsm: begin
          alufn = 6'h0b;
          asel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          regfile_read_address_b = 4'h2;
          if (custom_start_button) begin
            M_game_fsm_d = IDLE_game_fsm;
          end else begin
            M_game_fsm_d = START_SET_TIMER_game_fsm;
          end
        end
        CHECK_TIMER_game_fsm: begin
          alufn = 6'h10;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h3;
          regfile_read_address_b = 4'h5;
          regfile_read_address_a = 4'h2;
          M_game_fsm_d = BRANCH_TIMER_game_fsm;
        end
        BRANCH_TIMER_game_fsm: begin
          we_regfile = 1'h0;
          regfile_read_address_b = 4'h3;
          if (~regfile_datain[0+0-:1]) begin
            M_game_fsm_d = DECREASE_TIMER_game_fsm;
          end else begin
            M_game_fsm_d = STOP_TIMER_game_fsm;
          end
        end
        DECREASE_TIMER_game_fsm: begin
          alufn = 6'h01;
          regfile_read_address_a = 4'h2;
          asel = 2'h0;
          bsel = 2'h1;
          we_regfile = 1'h1;
          regfile_write_address = 4'h2;
          M_game_fsm_d = IDLE_game_fsm;
        end
        IDLE_game_fsm: begin
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h0;
          if (decrease_timer) begin
            M_game_fsm_d = CHECK_TIMER_game_fsm;
          end
          if (ls_1) begin
            M_game_fsm_d = INCREASE_SCORE_1_game_fsm;
          end
          if (ls_2) begin
            M_game_fsm_d = INCREASE_SCORE_2_game_fsm;
          end
          if (ls_3) begin
            M_game_fsm_d = INCREASE_SCORE_3_game_fsm;
          end
          if (ls_4) begin
            M_game_fsm_d = INCREASE_SCORE_4_game_fsm;
          end
        end
        STOP_TIMER_game_fsm: begin
          regfile_read_address_a = 4'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h4;
          M_game_fsm_d = GAME_OVER_game_fsm;
        end
        INCREASE_SCORE_1_game_fsm: begin
          if (ls_1F) begin
            M_game_fsm_d = INCREASE_SCORE_1F_game_fsm;
          end else begin
            M_game_fsm_d = INCREASE_SCORE_1_game_fsm;
          end
        end
        INCREASE_SCORE_1F_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h2;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          regfile_read_address_b = 4'h0;
          M_game_fsm_d = INCREASE_BALLCOUNT_game_fsm;
        end
        INCREASE_SCORE_2_game_fsm: begin
          if (ls_2F) begin
            M_game_fsm_d = INCREASE_SCORE_2F_game_fsm;
          end else begin
            M_game_fsm_d = INCREASE_SCORE_2_game_fsm;
          end
        end
        INCREASE_SCORE_2F_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h3;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          regfile_read_address_b = 4'h0;
          M_game_fsm_d = INCREASE_BALLCOUNT_game_fsm;
        end
        INCREASE_SCORE_3_game_fsm: begin
          if (ls_3F) begin
            M_game_fsm_d = INCREASE_SCORE_3F_game_fsm;
          end else begin
            M_game_fsm_d = INCREASE_SCORE_3_game_fsm;
          end
        end
        INCREASE_SCORE_3F_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 2'h2;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          regfile_read_address_a = 4'h0;
          M_game_fsm_d = INCREASE_BALLCOUNT_game_fsm;
        end
        INCREASE_SCORE_4_game_fsm: begin
          if (ls_4F) begin
            M_game_fsm_d = INCREASE_SCORE_4F_game_fsm;
          end else begin
            M_game_fsm_d = INCREASE_SCORE_4_game_fsm;
          end
        end
        INCREASE_SCORE_4F_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h0;
          bsel = 2'h3;
          we_regfile = 1'h1;
          regfile_write_address = 4'h0;
          regfile_read_address_a = 4'h0;
          M_game_fsm_d = INCREASE_BALLCOUNT_game_fsm;
        end
        INCREASE_BALLCOUNT_game_fsm: begin
          alufn = 6'h00;
          asel = 2'h2;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_write_address = 4'h1;
          regfile_read_address_b = 4'h1;
          M_game_fsm_d = CHECK_BALLCOUNT_game_fsm;
        end
        CHECK_BALLCOUNT_game_fsm: begin
          alufn = 6'h10;
          asel = 2'h0;
          bsel = 2'h3;
          we_regfile = 1'h1;
          regfile_write_address = 4'h3;
          regfile_read_address_a = 4'h3;
          M_game_fsm_d = BRANCH_BALLCOUNT_game_fsm;
        end
        BRANCH_BALLCOUNT_game_fsm: begin
          regfile_read_address_b = 4'h3;
          if (regfile_datain[0+0-:1]) begin
            M_game_fsm_d = STOP_TIMER_game_fsm;
          end else begin
            M_game_fsm_d = IDLE_game_fsm;
          end
        end
        CALCULATE_SCORE_game_fsm: begin
          alufn = 6'h18;
          asel = 2'h0;
          bsel = 2'h0;
          we_regfile = 1'h1;
          regfile_read_address_a = 4'h7;
          regfile_read_address_b = 4'h0;
          regfile_write_address = 4'h0;
          alu_out_sel = 2'h0;
          M_game_fsm_d = STOP_TIMER_game_fsm;
        end
        GAME_OVER_game_fsm: begin
          if (rst) begin
            asel = 2'h0;
            we_regfile = 1'h1;
            regfile_read_address_a = 3'h5;
            regfile_write_address = 3'h4;
            alu_out_sel = 2'h0;
            M_game_fsm_d = RESET_TOTAL_SCORE_game_fsm;
          end else begin
            M_game_fsm_d = GAME_OVER_game_fsm;
          end
        end
        RESET_TOTAL_SCORE_game_fsm: begin
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_read_address_a = 3'h5;
          regfile_write_address = 3'h3;
          alu_out_sel = 2'h0;
          M_game_fsm_d = RESET_SCORE_game_fsm;
        end
        RESET_SCORE_game_fsm: begin
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_read_address_a = 3'h5;
          regfile_write_address = 3'h2;
          alu_out_sel = 2'h0;
          M_game_fsm_d = RESET_TIMER_game_fsm;
        end
        RESET_TIMER_game_fsm: begin
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_read_address_a = 3'h5;
          regfile_write_address = 3'h0;
          alu_out_sel = 2'h0;
          M_game_fsm_d = RESET_BALL_game_fsm;
        end
        RESET_BALL_game_fsm: begin
          asel = 2'h0;
          we_regfile = 1'h1;
          regfile_read_address_a = 3'h5;
          regfile_write_address = 3'h1;
          alu_out_sel = 2'h0;
          M_game_fsm_d = RESET_START_SET_TIMER_game_fsm;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
