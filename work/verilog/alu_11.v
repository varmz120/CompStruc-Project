/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_11 (
    input [5:0] alufn_signal,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_cmp_out;
  reg [3-1:0] M_cmp_alufn_signal;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_n;
  reg [1-1:0] M_cmp_v;
  comparator_16 cmp (
    .alufn_signal(M_cmp_alufn_signal),
    .z(M_cmp_z),
    .n(M_cmp_n),
    .v(M_cmp_v),
    .out(M_cmp_out)
  );
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [1-1:0] M_add_alufn_signal;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  adder_17 add (
    .alufn_signal(M_add_alufn_signal),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_shift_out;
  reg [16-1:0] M_shift_a;
  reg [4-1:0] M_shift_b;
  reg [2-1:0] M_shift_alufn_signal;
  shifter_18 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn_signal(M_shift_alufn_signal),
    .out(M_shift_out)
  );
  
  wire [16-1:0] M_bool_out;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn_signal;
  boolean_19 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn_signal(M_bool_alufn_signal),
    .out(M_bool_out)
  );
  
  wire [16-1:0] M_mult_out;
  reg [16-1:0] M_mult_a;
  reg [16-1:0] M_mult_b;
  multiplier_20 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .out(M_mult_out)
  );
  
  always @* begin
    M_add_alufn_signal = alufn_signal[0+0-:1];
    M_add_a = a;
    M_add_b = b;
    M_bool_alufn_signal = alufn_signal[0+3-:4];
    M_bool_a = a;
    M_bool_b = b;
    M_cmp_alufn_signal[2+0-:1] = alufn_signal[2+0-:1];
    M_cmp_alufn_signal[1+0-:1] = alufn_signal[1+0-:1];
    M_cmp_z = 1'h0;
    M_cmp_n = 1'h0;
    M_cmp_v = 1'h0;
    M_shift_alufn_signal[0+0-:1] = alufn_signal[0+0-:1];
    M_shift_alufn_signal[1+0-:1] = alufn_signal[1+0-:1];
    M_shift_a = a;
    M_shift_b = b[0+3-:4];
    M_mult_a = a;
    M_mult_b = b;
    
    case (alufn_signal[3+2-:3])
      3'h0: begin
        out = M_add_out;
      end
      3'h1: begin
        out = M_bool_out;
      end
      3'h2: begin
        out = M_cmp_out;
      end
      3'h3: begin
        out = M_mult_out;
      end
      3'h7: begin
        out = M_shift_out;
      end
      default: begin
        out = 16'h0000;
      end
    endcase
    
    case (alufn_signal[3+2-:3])
      3'h0: begin
        z = M_add_z;
        v = M_add_v;
        n = M_add_n;
      end
      default: begin
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
    endcase
  end
endmodule
